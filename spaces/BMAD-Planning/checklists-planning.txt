# BMAD Planning Checklists - Ki·ªÉm So√°t Ch·∫•t L∆∞·ª£ng Giai ƒêo·∫°n L·∫≠p K·∫ø Ho·∫°ch

---

## üìä PM Requirements Checklist

### M·ª•c ƒë√≠ch
Checklist to√†n di·ªán ƒë·ªÉ ƒë·∫£m b·∫£o Product Requirements Document (PRD) v√† Epic definitions ho√†n ch·ªânh, c√≥ c·∫•u tr√∫c t·ªët, v√† ph√π h·ª£p v·ªõi MVP development. PM ph·∫£i systematic review t·ª´ng item trong qu√° tr√¨nh ƒë·ªãnh nghƒ©a product.

## 1. PROBLEM DEFINITION & CONTEXT

### 1.1 Problem Statement
- [ ] **Clear articulation** c·ªßa problem ƒëang ƒë∆∞·ª£c gi·∫£i quy·∫øt
- [ ] **Identification** c·ªßa ai ƒëang experience problem n√†y  
- [ ] **Explanation** t·∫°i sao gi·∫£i quy·∫øt problem n√†y l·∫°i important
- [ ] **Quantification** c·ªßa problem impact (n·∫øu c√≥ th·ªÉ)
- [ ] **Differentiation** t·ª´ existing solutions

### 1.2 Business Goals & Success Metrics  
- [ ] **Specific, measurable** business objectives ƒë∆∞·ª£c defined
- [ ] **Clear success metrics** v√† KPIs established
- [ ] **Metrics tied** to user and business value
- [ ] **Baseline measurements** identified (n·∫øu applicable)
- [ ] **Timeframe** cho achieving goals specified

### 1.3 User Research & Insights
- [ ] **Target user personas** clearly defined
- [ ] **User needs v√† pain points** documented
- [ ] **User research findings** summarized (n·∫øu available)
- [ ] **Competitive analysis** included
- [ ] **Market context** provided

## 2. MVP SCOPE DEFINITION

### 2.1 Core Functionality
- [ ] **Essential features** clearly distinguished t·ª´ nice-to-haves
- [ ] **Features directly address** defined problem statement  
- [ ] **Each Epic ties back** to specific user needs
- [ ] **Features v√† Stories** described from user perspective
- [ ] **Minimum requirements** for success defined

### 2.2 Scope Boundaries
- [ ] **Clear articulation** c·ªßa what is OUT of scope
- [ ] **Future enhancements section** included
- [ ] **Rationale for scope decisions** documented
- [ ] **MVP minimizes functionality** while maximizing learning
- [ ] **Scope has been reviewed** v√† refined multiple times

### 2.3 MVP Validation Approach
- [ ] **Method for testing MVP success** defined
- [ ] **Initial user feedback mechanisms** planned
- [ ] **Criteria for moving beyond MVP** specified
- [ ] **Learning goals for MVP** articulated  
- [ ] **Timeline expectations** set

## 3. USER EXPERIENCE REQUIREMENTS

### 3.1 User Journeys & Flows
- [ ] **Primary user flows** documented
- [ ] **Entry v√† exit points** for each flow identified
- [ ] **Decision points v√† branches** mapped
- [ ] **Critical path** highlighted
- [ ] **Edge cases** considered

### 3.2 Usability Requirements
- [ ] **Accessibility considerations** documented
- [ ] **Platform/device compatibility** specified
- [ ] **Performance expectations** from user perspective defined
- [ ] **Error handling v√† recovery approaches** outlined
- [ ] **User feedback mechanisms** identified

### 3.3 UI Requirements
- [ ] **Information architecture** outlined
- [ ] **Critical UI components** identified
- [ ] **Visual design guidelines** referenced (n·∫øu applicable)
- [ ] **Content requirements** specified
- [ ] **High-level navigation structure** defined

## 4. FUNCTIONAL REQUIREMENTS

### 4.1 Feature Completeness
- [ ] **All required features** for MVP documented
- [ ] **Features have clear**, user-focused descriptions
- [ ] **Feature priority/criticality** indicated
- [ ] **Requirements are testable** v√† verifiable
- [ ] **Dependencies between features** identified

### 4.2 Requirements Quality
- [ ] **Requirements are specific** v√† unambiguous
- [ ] **Requirements focus on WHAT** not HOW
- [ ] **Requirements use consistent** terminology
- [ ] **Complex requirements** broken into simpler parts
- [ ] **Technical jargon** minimized ho·∫∑c explained

### 4.3 User Stories & Acceptance Criteria
- [ ] **Stories follow consistent** format
- [ ] **Acceptance criteria** are testable
- [ ] **Stories are sized appropriately** (not too large)
- [ ] **Stories are independent** where possible
- [ ] **Stories include necessary** context
- [ ] **Local testability requirements** defined in ACs cho relevant backend/data stories

## 5. NON-FUNCTIONAL REQUIREMENTS

### 5.1 Performance Requirements
- [ ] **Response time expectations** defined
- [ ] **Throughput/capacity requirements** specified
- [ ] **Scalability needs** documented
- [ ] **Resource utilization constraints** identified
- [ ] **Load handling expectations** set

### 5.2 Security & Compliance
- [ ] **Data protection requirements** specified
- [ ] **Authentication/authorization needs** defined
- [ ] **Compliance requirements** documented
- [ ] **Security testing requirements** outlined
- [ ] **Privacy considerations** addressed

### 5.3 Reliability & Resilience
- [ ] **Availability requirements** defined
- [ ] **Backup v√† recovery needs** documented
- [ ] **Fault tolerance expectations** set
- [ ] **Error handling requirements** specified
- [ ] **Maintenance v√† support considerations** included

### 5.4 Technical Constraints
- [ ] **Platform/technology constraints** documented
- [ ] **Integration requirements** outlined
- [ ] **Third-party service dependencies** identified
- [ ] **Infrastructure requirements** specified
- [ ] **Development environment needs** identified

## 6. EPIC & STORY STRUCTURE

### 6.1 Epic Definition
- [ ] **Epics represent cohesive** units of functionality
- [ ] **Epics focus on user/business** value delivery
- [ ] **Epic goals** clearly articulated
- [ ] **Epics are sized appropriately** for incremental delivery
- [ ] **Epic sequence v√† dependencies** identified

### 6.2 Story Breakdown
- [ ] **Stories are broken down** to appropriate size
- [ ] **Stories have clear**, independent value
- [ ] **Stories include appropriate** acceptance criteria
- [ ] **Story dependencies v√† sequence** documented
- [ ] **Stories aligned** with epic goals

### 6.3 First Epic Completeness
- [ ] **First epic includes** all necessary setup steps
- [ ] **Project scaffolding v√† initialization** addressed
- [ ] **Core infrastructure setup** included
- [ ] **Development environment setup** addressed
- [ ] **Local testability** established early

## 7. TECHNICAL GUIDANCE

### 7.1 Architecture Guidance
- [ ] **Initial architecture direction** provided
- [ ] **Technical constraints** clearly communicated
- [ ] **Integration points** identified
- [ ] **Performance considerations** highlighted
- [ ] **Security requirements** articulated
- [ ] **Known areas of high complexity** flagged for architectural deep-dive

### 7.2 Technical Decision Framework
- [ ] **Decision criteria** for technical choices provided
- [ ] **Trade-offs articulated** for key decisions
- [ ] **Rationale for selecting** primary approach documented
- [ ] **Non-negotiable technical requirements** highlighted
- [ ] **Areas requiring technical investigation** identified
- [ ] **Guidance on technical debt** approach provided

### 7.3 Implementation Considerations
- [ ] **Development approach guidance** provided
- [ ] **Testing requirements** articulated
- [ ] **Deployment expectations** set
- [ ] **Monitoring needs** identified
- [ ] **Documentation requirements** specified

## 8. CROSS-FUNCTIONAL REQUIREMENTS

### 8.1 Data Requirements
- [ ] **Data entities v√† relationships** identified
- [ ] **Data storage requirements** specified
- [ ] **Data quality requirements** defined
- [ ] **Data retention policies** identified
- [ ] **Data migration needs** addressed (n·∫øu applicable)
- [ ] **Schema changes planned** iteratively

### 8.2 Integration Requirements
- [ ] **External system integrations** identified
- [ ] **API requirements** documented
- [ ] **Authentication for integrations** specified
- [ ] **Data exchange formats** defined
- [ ] **Integration testing requirements** outlined

### 8.3 Operational Requirements
- [ ] **Deployment frequency expectations** set
- [ ] **Environment requirements** defined
- [ ] **Monitoring v√† alerting needs** identified
- [ ] **Support requirements** documented
- [ ] **Performance monitoring approach** specified

## 9. CLARITY & COMMUNICATION

### 9.1 Documentation Quality
- [ ] **Documents use clear**, consistent language
- [ ] **Documents are well-structured** v√† organized
- [ ] **Technical terms** defined where necessary
- [ ] **Diagrams/visuals** included where helpful
- [ ] **Documentation is versioned** appropriately

### 9.2 Stakeholder Alignment
- [ ] **Key stakeholders** identified
- [ ] **Stakeholder input** incorporated
- [ ] **Potential areas of disagreement** addressed
- [ ] **Communication plan** established
- [ ] **Approval process** defined

---

## üìã Change Management Checklist

### M·ª•c ƒë√≠ch
Systematic guide ƒë·ªÉ navigate analysis v√† planning khi significant change (pivot, tech issue, missing requirement, failed story) ƒë∆∞·ª£c identified trong BMAD workflow.

## 1. UNDERSTAND THE TRIGGER & CONTEXT

### 1.1 Issue Identification
- [ ] **Triggering story** clearly identified
- [ ] **Core problem** articulated precisely:
  - [ ] Technical limitation/dead-end?
  - [ ] Newly discovered requirement?
  - [ ] Fundamental misunderstanding?
  - [ ] Necessary pivot based on feedback?
  - [ ] Failed/abandoned story needing new approach?
- [ ] **Initial impact** assessed v√† documented
- [ ] **Evidence gathered** (logs, error messages, user feedback)

## 2. EPIC IMPACT ASSESSMENT

### 2.1 Current Epic Analysis
- [ ] **Current epic completion** feasibility assessed
- [ ] **Epic modification needs** identified (story changes, additions, removals)
- [ ] **Epic abandonment** consideration evaluated

### 2.2 Future Epic Analysis  
- [ ] **All remaining planned epics** reviewed
- [ ] **Required changes** to planned stories identified
- [ ] **Epic invalidation** risks assessed
- [ ] **New epic creation** needs identified
- [ ] **Epic priority/sequence** adjustments planned

### 2.3 Impact Summary
- [ ] **Overall effect** on project's epic structure documented

## 3. ARTIFACT CONFLICT & IMPACT ANALYSIS

### 3.1 PRD Review
- [ ] **Conflicts with core goals** assessed
- [ ] **PRD clarification/update needs** identified

### 3.2 Architecture Document Review
- [ ] **Architecture conflicts** identified
- [ ] **Impacted components/diagrams** noted
- [ ] **Technology list updates** needed
- [ ] **Data models/schemas** revision requirements
- [ ] **External API integrations** impacts

### 3.3 Other Artifacts Review
- [ ] **Frontend spec conflicts** identified
- [ ] **Infrastructure impacts** assessed
- [ ] **All artifact updates** documented

## 4. PATH FORWARD EVALUATION

### 4.1 Direct Adjustment Option
- [ ] **Modification feasibility** assessed
- [ ] **Adjustment scope** defined
- [ ] **Effort, feasibility, risks** evaluated

### 4.2 Rollback Option
- [ ] **Rollback benefits** vs effort assessed
- [ ] **Specific stories/commits** for rollback identified
- [ ] **Rollback effort** estimated
- [ ] **Impact of rollback** evaluated
- [ ] **Net benefit vs Direct Adjustment** compared

### 4.3 MVP Re-scoping Option
- [ ] **MVP achievability** v·ªõi current constraints assessed
- [ ] **Scope reduction needs** identified
- [ ] **Core MVP goals** modification needs
- [ ] **Alternative approaches** evaluated
- [ ] **Fundamental replan needs** assessed

### 4.4 Path Selection
- [ ] **Recommended path** selected v·ªõi clear rationale

## 5. CHANGE PROPOSAL COMPONENTS

- [ ] **Issue summary** clear v√† concise
- [ ] **Epic impact summary** documented
- [ ] **Artifact adjustment needs** listed
- [ ] **Recommended path forward** v·ªõi rationale
- [ ] **PRD MVP impact** changes documented
- [ ] **High-level action plan** created
- [ ] **Agent handoff plan** identified

## 6. FINAL REVIEW & HANDOFF

- [ ] **Checklist completion** confirmed
- [ ] **Change proposal accuracy** verified
- [ ] **User approval** obtained
- [ ] **Next steps** confirmed v·ªõi specific agents

---

## ‚úÖ Planning Phase Validation Summary

### Category Status Assessment

| Category | Status | Critical Issues | Resolution Plan |
|----------|--------|----------------|----------------|
| **Problem Definition & Context** | PASS/FAIL/PARTIAL | | |
| **MVP Scope Definition** | PASS/FAIL/PARTIAL | | |
| **User Experience Requirements** | PASS/FAIL/PARTIAL | | |
| **Functional Requirements** | PASS/FAIL/PARTIAL | | |
| **Non-Functional Requirements** | PASS/FAIL/PARTIAL | | |
| **Epic & Story Structure** | PASS/FAIL/PARTIAL | | |
| **Technical Guidance** | PASS/FAIL/PARTIAL | | |
| **Cross-Functional Requirements** | PASS/FAIL/PARTIAL | | |
| **Clarity & Communication** | PASS/FAIL/PARTIAL | | |

### Critical Deficiencies
**List all critical issues c·∫ßn address tr∆∞·ªõc handoff to Architecture:**
- {Critical issue 1}
- {Critical issue 2}
- {Critical issue 3}

### Recommendations
**Specific recommendations for addressing deficiencies:**
- {Recommendation 1}
- {Recommendation 2}
- {Recommendation 3}

### Final Decision

#### ‚úÖ READY FOR ARCHITECTURE
**Criteria Met:**
- [ ] PRD comprehensive v√† properly structured
- [ ] Epics ready for architectural design
- [ ] All critical deficiencies resolved
- [ ] Stakeholder approval obtained
- [ ] Handoff materials prepared

#### ‚ùå NEEDS REFINEMENT  
**Reason:**
- {Specific areas requiring additional work}
- {Timeline for refinement}
- {Required resources for completion}

---

**Validation Completed by:** {Name}  
**Date:** {Date}  
**Next Phase:** Architecture Design  
**Handoff Scheduled:** {Date}

---

## üöÄ Quality Assurance Complete!

C√°c checklists n√†y ƒë·∫£m b·∫£o:

- üìä **PM Excellence**: Comprehensive PRD validation
- üîÑ **Change Management**: Systematic handling of pivots v√† adjustments  
- ‚úÖ **Quality Gates**: Rigorous validation tr∆∞·ªõc moving to Architecture
- üéØ **Handoff Readiness**: Clear criteria for phase transition

**Use these checklists to maintain high standards throughout Planning phase! üìã‚ú®**