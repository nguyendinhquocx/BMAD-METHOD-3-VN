# BMAD-Mini Checklists - Essential Quality Gates

---

## 🎯 **Purpose: Maintain Quality at Speed**

Quick validation checklists to ensure high standards without slowing down development. Use these to verify each phase meets requirements before proceeding.

---

## 📋 **Phase 1: Planning Quality Checklist**

### ✅ **Mini-PRD Validation Checklist**
**Agent**: Alex (Analyst-PM)  
**When**: Before handoff to Phase 2

#### 🎯 **Goal Clarity (Pass/Fail)**
- [ ] **Problem Statement Clear**: Can explain in one sentence what problem this solves
- [ ] **Value Proposition Obvious**: Clear why users would want this
- [ ] **Success Measurable**: Have 2-3 specific success metrics defined
- [ ] **Stakeholder Aligned**: All key stakeholders understand và agree on goal

#### 👥 **User Understanding (Pass/Fail)**
- [ ] **Target User Specific**: Not "everyone" - specific demographic/psychographic
- [ ] **User Need Validated**: Evidence that users actually have this problem
- [ ] **User Journey Clear**: Understand how users will discover và use this
- [ ] **User Value Obvious**: Clear what users gain from using this

#### ⚡ **MVP Scope (Critical)**
- [ ] **Feature List Focused**: 5-7 features maximum cho MVP
- [ ] **Must-Have vs Nice-to-Have Clear**: Can defend why each feature is essential
- [ ] **Timeline Realistic**: Can actually build this trong available time
- [ ] **Resources Sufficient**: Have skills/tools needed cho chosen features

#### 🔧 **Technical Feasibility (Pass/Fail)**
- [ ] **Tech Constraints Identified**: Know any limitations (budget, platforms, integrations)
- [ ] **Complexity Appropriate**: Project complexity matches team capability
- [ ] **Dependencies Clear**: Understand any external services/APIs needed
- [ ] **Performance Requirements Realistic**: Load time/responsiveness targets achievable

#### 📊 **Business Viability (Advisory)**
- [ ] **Success Metrics Meaningful**: Metrics actually indicate project success
- [ ] **Timeline Acceptable**: Launch date meets business needs
- [ ] **Budget Realistic**: Costs (hosting, services, time) fit budget
- [ ] **Maintenance Considered**: Plan for ongoing updates và support

### 🚨 **Red Flags - Stop và Revisit**
- ❌ **Scope Creep**: Feature list growing during planning
- ❌ **Unclear Users**: Can't describe specific target user
- ❌ **No Success Metrics**: Don't know how to measure success
- ❌ **Unrealistic Timeline**: Timeline doesn't match complexity
- ❌ **Mission Creep**: Goal expanding beyond original purpose

### ✅ **Phase 1 Sign-Off Requirements**
**All Must Pass**:
- [ ] Mini-PRD approved by all stakeholders
- [ ] MVP scope locked (no more feature additions)
- [ ] Success metrics agreed upon
- [ ] Timeline constraints understood
- [ ] Technical approach viable
- [ ] Ready for design phase

---

## 🏗️ **Phase 2: Design Quality Checklist**

### ✅ **Technical Architecture Validation**
**Agent**: Sam (Architect-Designer)  
**When**: After tech stack selection, before UI design

#### 🔧 **Technology Stack (Critical)**
- [ ] **Framework Choice Justified**: Clear reason why this tech stack
- [ ] **Learning Curve Acceptable**: Team familiar với chosen technologies
- [ ] **Performance Capable**: Stack can meet performance requirements
- [ ] **Scalability Sufficient**: Can handle expected usage growth
- [ ] **Maintenance Feasible**: Team can maintain và update long-term
- [ ] **Cost Within Budget**: All technology costs fit budget constraints

#### 🎨 **UI/UX Design (Pass/Fail)**
- [ ] **User Flow Logical**: Users can accomplish goals efficiently
- [ ] **Mobile-First Design**: Excellent experience on mobile devices
- [ ] **Accessibility Considered**: Basic WCAG 2.1 principles followed
- [ ] **Component System Planned**: Reusable UI elements identified
- [ ] **Visual Hierarchy Clear**: Important elements stand out appropriately
- [ ] **Loading States Designed**: User feedback during wait times

#### ⚡ **System Architecture (Pass/Fail)**
- [ ] **Data Flow Clear**: Understand how information moves through system
- [ ] **API Design Logical**: Endpoints make sense for planned features
- [ ] **State Management Appropriate**: Right level của complexity for project
- [ ] **Error Handling Planned**: Know how to handle common error scenarios
- [ ] **Security Considered**: Basic security principles applied
- [ ] **Performance Optimized**: Plan for fast loading và smooth interactions

### ✅ **Design System Validation**
**When**: Before handoff to development

#### 🎨 **Visual Design (Pass/Fail)**
- [ ] **Brand Consistent**: Design reflects intended brand personality
- [ ] **Typography Hierarchy**: Clear text sizing và weight system
- [ ] **Color System Logical**: Consistent color usage across design
- [ ] **Spacing Consistent**: Regular spacing pattern throughout
- [ ] **Interactive Elements Clear**: Users know what's clickable/touchable

#### 📱 **Responsive Design (Critical)**
- [ ] **Mobile Layout Works**: Great experience on 320px+ screens
- [ ] **Tablet Layout Functional**: Good experience on medium screens
- [ ] **Desktop Layout Optimized**: Takes advantage của larger screens
- [ ] **Breakpoint Strategy Clear**: Know when layout changes
- [ ] **Touch Targets Adequate**: Buttons/links easy to tap on mobile

### 🚨 **Red Flags - Stop và Revisit**
- ❌ **Technology Overkill**: Using complex stack cho simple project
- ❌ **Unknown Technologies**: Choosing unfamiliar frameworks under time pressure
- ❌ **Mobile Afterthought**: Designing desktop-first
- ❌ **Performance Ignored**: No consideration of loading speed
- ❌ **Accessibility Ignored**: Design doesn't work với keyboard/screen readers

### ✅ **Phase 2 Sign-Off Requirements**
**All Must Pass**:
- [ ] Tech stack selected với clear rationale
- [ ] UI wireframes complete cho all key screens
- [ ] Component architecture planned
- [ ] System design documented
- [ ] Performance targets defined
- [ ] Implementation roadmap realistic

---

## 🚀 **Phase 3: Development Quality Checklist**

### ✅ **Code Quality Validation**
**Agent**: Chris (Developer-Ops)  
**When**: During development, before deployment

#### 💻 **Development Standards (Critical)**
- [ ] **Code Runs Locally**: `npm run dev` works without errors
- [ ] **Build Succeeds**: `npm run build` completes successfully
- [ ] **No Console Errors**: Browser console clean on all pages
- [ ] **TypeScript Passes**: No type errors (if using TypeScript)
- [ ] **Linting Passes**: ESLint rules followed
- [ ] **Git History Clean**: Meaningful commit messages, proper branches

#### ⚡ **Performance Standards (Critical)**
- [ ] **Lighthouse Performance >90**: Core Web Vitals within targets
- [ ] **Load Time <3 Seconds**: Fast loading on 3G connection
- [ ] **Bundle Size Reasonable**: JavaScript bundle optimized
- [ ] **Images Optimized**: Proper formats, compression, sizing
- [ ] **Lazy Loading Implemented**: Non-critical resources load as needed

#### 🎯 **Functionality Testing (Pass/Fail)**
- [ ] **All MVP Features Work**: Every planned feature functional
- [ ] **User Flows Complete**: Users can accomplish primary goals
- [ ] **Forms Validate**: Proper input validation và error messages
- [ ] **Error States Handled**: Graceful handling của common errors
- [ ] **Loading States Present**: User feedback during async operations
- [ ] **Edge Cases Considered**: Handles empty states, long text, etc.

#### 📱 **Cross-Device Testing (Critical)**
- [ ] **Mobile Experience Excellent**: Great usability on phones
- [ ] **Tablet Experience Good**: Functional on medium screens
- [ ] **Desktop Experience Optimal**: Takes advantage của large screens
- [ ] **Touch Interactions Work**: All buttons/links easy to tap
- [ ] **Keyboard Navigation**: Can navigate without mouse

#### 🌐 **Cross-Browser Compatibility (Pass/Fail)**
- [ ] **Chrome Works**: Latest Chrome version fully functional
- [ ] **Firefox Works**: Latest Firefox version fully functional
- [ ] **Safari Works**: Latest Safari version fully functional (iOS too)
- [ ] **Edge Works**: Latest Edge version fully functional

### ✅ **Pre-Deployment Validation**
**When**: Before production deployment

#### 🔒 **Security Checklist (Critical)**
- [ ] **HTTPS Configured**: SSL certificate installed và working
- [ ] **Form Security**: Input validation, CSRF protection
- [ ] **API Security**: Rate limiting, authentication (if applicable)
- [ ] **Sensitive Data Protected**: No secrets trong client-side code
- [ ] **Security Headers**: Basic security headers implemented

#### 📊 **SEO & Analytics (Pass/Fail)**
- [ ] **Meta Tags Present**: Title, description, og:tags
- [ ] **Structured Data**: Schema.org markup (if beneficial)
- [ ] **Sitemap Generated**: XML sitemap cho search engines
- [ ] **Analytics Installed**: Google Analytics hoặc equivalent
- [ ] **Performance Tracking**: Core Web Vitals monitoring

#### 🚨 **Production Readiness (Critical)**
- [ ] **Environment Variables Set**: All config properly externalized
- [ ] **Database Seeded**: Initial data loaded (if applicable)
- [ ] **Domain Configured**: Custom domain pointing correctly
- [ ] **Monitoring Setup**: Error tracking và uptime monitoring
- [ ] **Backup Strategy**: Data backup plan in place

### 🚨 **Red Flags - Stop và Fix**
- ❌ **Performance Problems**: Lighthouse score <85, loading >5 seconds
- ❌ **Mobile Broken**: Poor mobile experience hoặc non-responsive
- ❌ **Security Issues**: HTTP only, exposed secrets, no input validation
- ❌ **Functionality Gaps**: Core features not working properly
- ❌ **Browser Compatibility**: Major browsers not working

### ✅ **Phase 3 Sign-Off Requirements**
**All Must Pass**:
- [ ] All MVP features implemented và tested
- [ ] Performance benchmarks met (>90 Lighthouse)
- [ ] Cross-device compatibility verified
- [ ] Security basics implemented
- [ ] Production deployment successful
- [ ] Monitoring và analytics active

---

## 🎯 **Quick Quality Gates**

### ⚡ **30-Second Quality Check**
**Use between any major work session**:
- [ ] Does this solve the user's problem?
- [ ] Is this good enough for MVP?
- [ ] Would I be proud to show this?
- [ ] Can users easily accomplish their goal?

### 🚀 **5-Minute Demo Test**
**Before handoffs và final launch**:
- [ ] Can demonstrate core functionality trong 5 minutes
- [ ] Demo runs smoothly without crashes
- [ ] User value is obvious to observers
- [ ] Performance feels fast và responsive

### 📱 **Mobile First Test**
**After any UI changes**:
- [ ] Open on actual mobile device
- [ ] All buttons/links easy to tap
- [ ] Text readable without zooming
- [ ] Layout doesn't break or overflow

---

## 🎯 **Checklist Usage Guidelines**

### ✅ **How to Use These Checklists**

#### 🎯 **Phase Gates**
- Use comprehensive checklist before phase transitions
- All "Critical" và "Pass/Fail" items must pass
- "Advisory" items should pass but can be exceptions

#### ⚡ **Daily Quality Checks**
- Use quick quality gates during development
- Catch issues early before they compound
- Maintain quality momentum throughout project

#### 🚨 **Red Flag Monitoring**
- Watch for red flags throughout each phase
- Stop và address red flags immediately
- Don't proceed with known quality issues

### 🎪 **Checklist Philosophy**
- **Quality Without Bureaucracy**: Essential checks only
- **Catch Issues Early**: Prevent expensive late-stage fixes
- **Maintain Standards**: Consistent quality across projects
- **Enable Speed**: Quality checks that accelerate rather than slow

### 🚀 **Customization Guidelines**
- **Add Domain-Specific Items**: Include industry-specific requirements
- **Adjust for Complexity**: Scale checklist detail với project size
- **Team Standards**: Add your team's specific quality requirements
- **Continuous Improvement**: Update based on project learnings

---

**These checklists ensure BMAD-Mini maintains high quality while moving fast. Use them to ship confidently! ✅**